public IActionResult Retrieve([FromQuery] PaginationFilter filter, int? enterpriseId)
        {
            List<int> availableEnterprises;
            try
            {
                availableEnterprises = AuthorizeUsersEnterprises();
            }
            catch (UnauthorizedAccessException)
            {
                return Unauthorized();
            }
            
            List<Vehicle> vehicles = [];
            var limit = filter.Limit;
            if (enterpriseId == null)
            {
                int enterpriseIndex = 0;
                while(vehicles.Count < filter.Limit && enterpriseIndex < availableEnterprises.Count)
                {
                    vehicles.AddRange(vehicleService.GetAllVehicles(availableEnterprises[enterpriseIndex], filter));
                    ++enterpriseIndex;
                }

                if (vehicles.Count > filter.Limit)
                {
                    var limitedSegment = new ArraySegment<Vehicle>(vehicles.ToArray());
                    vehicles = limitedSegment[..(limit - 1)].ToList();
                }
                
                var number = vehicles.Count;
                logger.LogInformation("Requested all vehicles without specifying an enterprise. Returned " +
                                       "{Number} vehicles of {Limit} limit requested.", number, limit);
                return Ok(vehicles);
            }
            
            if (!availableEnterprises.Contains(enterpriseId ?? throw new Exception()))
                return BadRequest("You aren't authorized to manage this enterprise");

            vehicles = vehicleService.GetAllVehicles(enterpriseId ?? throw new Exception(), filter);
            var count = vehicles.Count;
            logger.LogInformation("Returned {Count} vehicles of requested {Limit} limit of the enterprise " +
                                   "with id of {EnterpriseId}", count, limit, enterpriseId);
            return Ok(vehicles);
        }

1. Чтобы избавиться от проверки на то, был ли передан айди компании, можно разделить этот метода на два: где найди есть, и где его нет. (Параметрический полиморфизм)
2. От цикла while можно избавиться декларативным forEach. 
3. Получение доступных компаний можно упростить декларативными подсластителями. 

В итоге получается метод, который возвращает все автомобили из доступных для авторизованного менеджера (изначальная функция подразделяется на две: с указанием конкретной компании и без. Первый метод получается в две строки, поэтому показываю только последний). 

public IActionResult Retrieve([FromQuery] PaginationFilter filter)
{
	List<Vehicle> vehicles = [];
	List<int> availableEnterprises = getAvailableEnterprises() ?? throw new Exception(You aren't authorized to manage this enterprise”);

	availableEnterprises.forEach(currentEnterprise => {
		vehicles.AddRange(vehicleService.GetAllVehicles(currentEnterprise, filter));
	});

	logger.LogInformation("Requested all vehicles without specifying an enterprise. Returned " +
                                       "{Number} vehicles of {Limit} limit requested.", vehicle.Count, filter.Limit);
  
	return Ok(vehicles);
}


=======================================================


private async Task<bool> BuildPath(MultiPolygon polygon, List<Tri> triangles)
        {
            bool succeed = true;
            FeatureCollection featureCollection = [];
            do
            {
                try
                {
                    Point firstPoint = GeneratePoint(polygon, triangles);
                    Point secondPoint = GeneratePoint(polygon, triangles);
                    GeoJsonReader reader = new();
                    featureCollection = reader.Read<FeatureCollection>(await (
                                await GetPathBetweenAsync(firstPoint, secondPoint)
                            ).Content.ReadAsStringAsync());
                }
                catch
                {
                    succeed = false;
                }
            } while (!succeed);

            if (featureCollection == null) return false;

            LineString? path = featureCollection[0].Geometry as LineString;
            if (path == null) return false;
            if (!float.TryParse((featureCollection[0].Attributes.GetOptionalValue("summary") as IAttributesTable 
                                 ?? throw new Exception("No summary field was returned by the map server"))
                    .GetOptionalValue("duration").ToString(), out var rideDuration))
            {
                Console.WriteLine("Failed parsing time");
                return false;
            }
            
            foreach (var item in path.Coordinates)
            {
                _coordinates.Enqueue(item);
            }

            _ridePointsInterval = rideDuration / _coordinates.Count;

            return true;
        }
 

1. Потенциально бесконечный цикл while следует устранить. Для соблюдения SRP лучше переместить обработку исключительных ситуаций в другой компонент, а здесь оставить только возврат исключения в случае неудачи. (Неудача связана с тем, что случайной точки в треугольнике на полигоне может не оказаться на карте, что практически не проверить программно)
2. Лишние проверки на null лучше убрать. В GeoJSON может быть (или не быть) десятки нужных полей, поэтому удобно было бы вынести проверки на корректность в отдельную функцию, где полученный объект можно было бы проверить на соответствие всех полей. Так в коде пропадают ситуации, когда в объекте есть, например, поле featureCollection, но нет первого элемента в нём. 


private async Task<bool> BuildPath(MultiPolygon polygon, List<Tri> triangles)
        {        
            FeatureCollection featureCollection = [];        
            try
            {
                Point firstPoint = GeneratePoint(polygon, triangles);
                Point secondPoint = GeneratePoint(polygon, triangles);
                GeoJsonReader reader = new();
                featureCollection = reader.Read<FeatureCollection>(await (
                            await GetPathBetweenAsync(firstPoint, secondPoint)
                        ).Content.ReadAsStringAsync());
            }
            catch
            {
                throw new PointGenerationException();
            }
           
			 GeoJsonVeerifier.EnsurePathIsRight(featureCollection);
            
			 (featureCollection[0].Attributes.GetOptionalValue("summary") as IAttributesTable). GetOptionalValue("duration").ToString(), out var rideDuration))
            
			 foreach (var item in path.Coordinates)
            {
                _coordinates.Enqueue(item);
            }

            _ridePointsInterval = rideDuration / _coordinates.Count;

            return true;
}          

=============================================================================

function metaConfigure(oldIndex, newIndex) {
    playlist[currentSongIndex].pause()
    
    playlist[currentSongIndex].audio.currentTime = 0

    if (replayButton.classList.contains('static-replay')) {
        playlist[oldIndex].audio.loop = false
        playlist[newIndex].audio.loop = true
    }
    currentSongIndex = newIndex
    currentCover[0].src = trackListCovers[newIndex].src
    currentArtist[0].textContent = trackListArtists[newIndex].textContent
    currentSongName[0].textContent = trackListSongNames[newIndex].textContent

    currentBackground[0].style.backgroundImage = 'url(' + trackListCovers[newIndex].src + ')'
    videoElement.classList.add('hidden');
    if (playlist[currentSongIndex].video !== undefined) {
        videoElement.classList.remove('hidden');
        videoElement.src = playlist[currentSongIndex].video;
        videoElement.pause();
    }

    updateMediaSessionMetadata();

    playlist[currentSongIndex].audio.volume = volumeBar.value

    if (playlist[currentSongIndex].text !== undefined) {
        trackText.innerHTML =  getTextFromFile(playlist[currentSongIndex].text)
    } else {
        trackText.innerHTML = playlist[currentSongIndex].title + "<br>" + playlist[currentSongIndex].artist
    }

    let isPlaying = false;

    if (!paused) {
        if (playlist[currentSongIndex].video != undefined) {
            if (!isPlaying) {
                isPlaying = true;
                videoElement.play()
                .then(() => {
                    isPlaying = false;
                })
                .catch(error => {
                    isPlaying = false;
                    console.log(error);
                });
            }
        }
    }
}


1. Цепочку if-ов надо обязательно убрать. (Введение переменной isPlaying вообще излишне)
2. Можно избавиться от else с помощью дефолтного значения переменной. 


function metaConfigure(oldIndex, newIndex) {
    playlist[currentSongIndex].pause()
    
    playlist[currentSongIndex].audio.currentTime = 0

    if (replayButton.classList.contains('static-replay')) {
        playlist[oldIndex].audio.loop = false
        playlist[newIndex].audio.loop = true
    }
    currentSongIndex = newIndex
    currentCover[0].src = trackListCovers[newIndex].src
    currentArtist[0].textContent = trackListArtists[newIndex].textContent
    currentSongName[0].textContent = trackListSongNames[newIndex].textContent

    currentBackground[0].style.backgroundImage = 'url(' + trackListCovers[newIndex].src + ')'
    videoElement.classList.add('hidden');
    if (playlist[currentSongIndex].video !== undefined) {
        videoElement.classList.remove('hidden');
        videoElement.src = playlist[currentSongIndex].video;
        videoElement.pause();
    }

    updateMediaSessionMetadata();

    playlist[currentSongIndex].audio.volume = volumeBar.value

	let songText = playlist[currentSongIndex].title + "<br>" + playlist[currentSongIndex].artist;
	if (playlist[currentSongIndex].text !== undefined) {
        songText =  getTextFromFile(playlist[currentSongIndex].text)
    }
	trackText.innerHTML = songText;

	if (!paused && playlist[currentSongIndex].video != undefined) {
		videoElement.play()
                .then(() => {
                    isPlaying = false;
                })
                .catch(error => {
                    isPlaying = false;
                    console.log(error);
                });
	}
}