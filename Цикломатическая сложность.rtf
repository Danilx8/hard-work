{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww20160\viewh12300\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \CocoaLigature0 public IActionResult Retrieve([FromQuery] PaginationFilter filter, int? enterpriseId)\
        \{\
            List<int> availableEnterprises;\
            try\
            \{\
                availableEnterprises = AuthorizeUsersEnterprises();\
            \}\
            catch (UnauthorizedAccessException)\
            \{\
                return Unauthorized();\
            \}\
            \
            List<Vehicle> vehicles = [];\
            var limit = filter.Limit;\
            if (enterpriseId == null)\
            \{\
                int enterpriseIndex = 0;\
                while(vehicles.Count < filter.Limit && enterpriseIndex < availableEnterprises.Count)\
                \{\
                    vehicles.AddRange(vehicleService.GetAllVehicles(availableEnterprises[enterpriseIndex], filter));\
                    ++enterpriseIndex;\
                \}\
\
                if (vehicles.Count > filter.Limit)\
                \{\
                    var limitedSegment = new ArraySegment<Vehicle>(vehicles.ToArray());\
                    vehicles = limitedSegment[..(limit - 1)].ToList();\
                \}\
                \
                var number = vehicles.Count;\
                logger.LogInformation("Requested all vehicles without specifying an enterprise. Returned " +\
                                       "\{Number\} vehicles of \{Limit\} limit requested.", number, limit);\
                return Ok(vehicles);\
            \}\
            \
            if (!availableEnterprises.Contains(enterpriseId ?? throw new Exception()))\
                return BadRequest("You aren't authorized to manage this enterprise");\
\
            vehicles = vehicleService.GetAllVehicles(enterpriseId ?? throw new Exception(), filter);\
            var count = vehicles.Count;\
            logger.LogInformation("Returned \{Count\} vehicles of requested \{Limit\} limit of the enterprise " +\
                                   "with id of \{EnterpriseId\}", count, limit, enterpriseId);\
            return Ok(vehicles);\
        \}\
\
1. \uc0\u1063 \u1090 \u1086 \u1073 \u1099  \u1080 \u1079 \u1073 \u1072 \u1074 \u1080 \u1090 \u1100 \u1089 \u1103  \u1086 \u1090  \u1087 \u1088 \u1086 \u1074 \u1077 \u1088 \u1082 \u1080  \u1085 \u1072  \u1090 \u1086 , \u1073 \u1099 \u1083  \u1083 \u1080  \u1087 \u1077 \u1088 \u1077 \u1076 \u1072 \u1085  \u1072 \u1081 \u1076 \u1080  \u1082 \u1086 \u1084 \u1087 \u1072 \u1085 \u1080 \u1080 , \u1084 \u1086 \u1078 \u1085 \u1086  \u1088 \u1072 \u1079 \u1076 \u1077 \u1083 \u1080 \u1090 \u1100  \u1101 \u1090 \u1086 \u1090  \u1084 \u1077 \u1090 \u1086 \u1076 \u1072  \u1085 \u1072  \u1076 \u1074 \u1072 : \u1075 \u1076 \u1077  \u1085 \u1072 \u1081 \u1076 \u1080  \u1077 \u1089 \u1090 \u1100 , \u1080  \u1075 \u1076 \u1077  \u1077 \u1075 \u1086  \u1085 \u1077 \u1090 . (\u1055 \u1072 \u1088 \u1072 \u1084 \u1077 \u1090 \u1088 \u1080 \u1095 \u1077 \u1089 \u1082 \u1080 \u1081  \u1087 \u1086 \u1083 \u1080 \u1084 \u1086 \u1088 \u1092 \u1080 \u1079 \u1084 )\
2. \uc0\u1054 \u1090  \u1094 \u1080 \u1082 \u1083 \u1072  while \u1084 \u1086 \u1078 \u1085 \u1086  \u1080 \u1079 \u1073 \u1072 \u1074 \u1080 \u1090 \u1100 \u1089 \u1103  \u1076 \u1077 \u1082 \u1083 \u1072 \u1088 \u1072 \u1090 \u1080 \u1074 \u1085 \u1099 \u1084  forEach. \
3. \uc0\u1055 \u1086 \u1083 \u1091 \u1095 \u1077 \u1085 \u1080 \u1077  \u1076 \u1086 \u1089 \u1090 \u1091 \u1087 \u1085 \u1099 \u1093  \u1082 \u1086 \u1084 \u1087 \u1072 \u1085 \u1080 \u1081  \u1084 \u1086 \u1078 \u1085 \u1086  \u1091 \u1087 \u1088 \u1086 \u1089 \u1090 \u1080 \u1090 \u1100  \u1076 \u1077 \u1082 \u1083 \u1072 \u1088 \u1072 \u1090 \u1080 \u1074 \u1085 \u1099 \u1084 \u1080  \u1087 \u1086 \u1076 \u1089 \u1083 \u1072 \u1089 \u1090 \u1080 \u1090 \u1077 \u1083 \u1103 \u1084 \u1080 . \
\
\uc0\u1042  \u1080 \u1090 \u1086 \u1075 \u1077  \u1087 \u1086 \u1083 \u1091 \u1095 \u1072 \u1077 \u1090 \u1089 \u1103  \u1084 \u1077 \u1090 \u1086 \u1076 , \u1082 \u1086 \u1090 \u1086 \u1088 \u1099 \u1081  \u1074 \u1086 \u1079 \u1074 \u1088 \u1072 \u1097 \u1072 \u1077 \u1090  \u1074 \u1089 \u1077  \u1072 \u1074 \u1090 \u1086 \u1084 \u1086 \u1073 \u1080 \u1083 \u1080  \u1080 \u1079  \u1076 \u1086 \u1089 \u1090 \u1091 \u1087 \u1085 \u1099 \u1093  \u1076 \u1083 \u1103  \u1072 \u1074 \u1090 \u1086 \u1088 \u1080 \u1079 \u1086 \u1074 \u1072 \u1085 \u1085 \u1086 \u1075 \u1086  \u1084 \u1077 \u1085 \u1077 \u1076 \u1078 \u1077 \u1088 \u1072  (\u1080 \u1079 \u1085 \u1072 \u1095 \u1072 \u1083 \u1100 \u1085 \u1072 \u1103  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1103  \u1087 \u1086 \u1076 \u1088 \u1072 \u1079 \u1076 \u1077 \u1083 \u1103 \u1077 \u1090 \u1089 \u1103  \u1085 \u1072  \u1076 \u1074 \u1077 : \u1089  \u1091 \u1082 \u1072 \u1079 \u1072 \u1085 \u1080 \u1077 \u1084  \u1082 \u1086 \u1085 \u1082 \u1088 \u1077 \u1090 \u1085 \u1086 \u1081  \u1082 \u1086 \u1084 \u1087 \u1072 \u1085 \u1080 \u1080  \u1080  \u1073 \u1077 \u1079 . \u1055 \u1077 \u1088 \u1074 \u1099 \u1081  \u1084 \u1077 \u1090 \u1086 \u1076  \u1087 \u1086 \u1083 \u1091 \u1095 \u1072 \u1077 \u1090 \u1089 \u1103  \u1074  \u1076 \u1074 \u1077  \u1089 \u1090 \u1088 \u1086 \u1082 \u1080 , \u1087 \u1086 \u1101 \u1090 \u1086 \u1084 \u1091  \u1087 \u1086 \u1082 \u1072 \u1079 \u1099 \u1074 \u1072 \u1102  \u1090 \u1086 \u1083 \u1100 \u1082 \u1086  \u1087 \u1086 \u1089 \u1083 \u1077 \u1076 \u1085 \u1080 \u1081 ). \
\
public IActionResult Retrieve([FromQuery] PaginationFilter filter)\
\{\
	List<Vehicle> vehicles = [];\
	List<int> availableEnterprises = getAvailableEnterprises() ?? throw new Exception(You aren't authorized to manage this enterprise\'94);\
\
	availableEnterprises.forEach(currentEnterprise => \{\
		vehicles.AddRange(vehicleService.GetAllVehicles(currentEnterprise, filter));\
	\});\
\
	logger.LogInformation("Requested all vehicles without specifying an enterprise. Returned " +\
                                       "\{Number\} vehicles of \{Limit\} limit requested.", vehicle.Count, filter.Limit);\
  \
	return Ok(vehicles);\
\}\
\
\
=======================================================\
\
\
private async Task<bool> BuildPath(MultiPolygon polygon, List<Tri> triangles)\
        \{\
            bool succeed = true;\
            FeatureCollection featureCollection = [];\
            do\
            \{\
                try\
                \{\
                    Point firstPoint = GeneratePoint(polygon, triangles);\
                    Point secondPoint = GeneratePoint(polygon, triangles);\
                    GeoJsonReader reader = new();\
                    featureCollection = reader.Read<FeatureCollection>(await (\
                                await GetPathBetweenAsync(firstPoint, secondPoint)\
                            ).Content.ReadAsStringAsync());\
                \}\
                catch\
                \{\
                    succeed = false;\
                \}\
            \} while (!succeed);\
\
            if (featureCollection == null) return false;\
\
            LineString? path = featureCollection[0].Geometry as LineString;\
            if (path == null) return false;\
            if (!float.TryParse((featureCollection[0].Attributes.GetOptionalValue("summary") as IAttributesTable \
                                 ?? throw new Exception("No summary field was returned by the map server"))\
                    .GetOptionalValue("duration").ToString(), out var rideDuration))\
            \{\
                Console.WriteLine("Failed parsing time");\
                return false;\
            \}\
            \
            foreach (var item in path.Coordinates)\
            \{\
                _coordinates.Enqueue(item);\
            \}\
\
            _ridePointsInterval = rideDuration / _coordinates.Count;\
\
            return true;\
        \}\
 \
\
1. \uc0\u1055 \u1086 \u1090 \u1077 \u1085 \u1094 \u1080 \u1072 \u1083 \u1100 \u1085 \u1086  \u1073 \u1077 \u1089 \u1082 \u1086 \u1085 \u1077 \u1095 \u1085 \u1099 \u1081  \u1094 \u1080 \u1082 \u1083  while \u1089 \u1083 \u1077 \u1076 \u1091 \u1077 \u1090  \u1091 \u1089 \u1090 \u1088 \u1072 \u1085 \u1080 \u1090 \u1100 . \u1044 \u1083 \u1103  \u1089 \u1086 \u1073 \u1083 \u1102 \u1076 \u1077 \u1085 \u1080 \u1103  SRP \u1083 \u1091 \u1095 \u1096 \u1077  \u1087 \u1077 \u1088 \u1077 \u1084 \u1077 \u1089 \u1090 \u1080 \u1090 \u1100  \u1086 \u1073 \u1088 \u1072 \u1073 \u1086 \u1090 \u1082 \u1091  \u1080 \u1089 \u1082 \u1083 \u1102 \u1095 \u1080 \u1090 \u1077 \u1083 \u1100 \u1085 \u1099 \u1093  \u1089 \u1080 \u1090 \u1091 \u1072 \u1094 \u1080 \u1081  \u1074  \u1076 \u1088 \u1091 \u1075 \u1086 \u1081  \u1082 \u1086 \u1084 \u1087 \u1086 \u1085 \u1077 \u1085 \u1090 , \u1072  \u1079 \u1076 \u1077 \u1089 \u1100  \u1086 \u1089 \u1090 \u1072 \u1074 \u1080 \u1090 \u1100  \u1090 \u1086 \u1083 \u1100 \u1082 \u1086  \u1074 \u1086 \u1079 \u1074 \u1088 \u1072 \u1090  \u1080 \u1089 \u1082 \u1083 \u1102 \u1095 \u1077 \u1085 \u1080 \u1103  \u1074  \u1089 \u1083 \u1091 \u1095 \u1072 \u1077  \u1085 \u1077 \u1091 \u1076 \u1072 \u1095 \u1080 . (\u1053 \u1077 \u1091 \u1076 \u1072 \u1095 \u1072  \u1089 \u1074 \u1103 \u1079 \u1072 \u1085 \u1072  \u1089  \u1090 \u1077 \u1084 , \u1095 \u1090 \u1086  \u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1086 \u1081  \u1090 \u1086 \u1095 \u1082 \u1080  \u1074  \u1090 \u1088 \u1077 \u1091 \u1075 \u1086 \u1083 \u1100 \u1085 \u1080 \u1082 \u1077  \u1085 \u1072  \u1087 \u1086 \u1083 \u1080 \u1075 \u1086 \u1085 \u1077  \u1084 \u1086 \u1078 \u1077 \u1090  \u1085 \u1077  \u1086 \u1082 \u1072 \u1079 \u1072 \u1090 \u1100 \u1089 \u1103  \u1085 \u1072  \u1082 \u1072 \u1088 \u1090 \u1077 , \u1095 \u1090 \u1086  \u1087 \u1088 \u1072 \u1082 \u1090 \u1080 \u1095 \u1077 \u1089 \u1082 \u1080  \u1085 \u1077  \u1087 \u1088 \u1086 \u1074 \u1077 \u1088 \u1080 \u1090 \u1100  \u1087 \u1088 \u1086 \u1075 \u1088 \u1072 \u1084 \u1084 \u1085 \u1086 )\
2. \uc0\u1051 \u1080 \u1096 \u1085 \u1080 \u1077  \u1087 \u1088 \u1086 \u1074 \u1077 \u1088 \u1082 \u1080  \u1085 \u1072  null \u1083 \u1091 \u1095 \u1096 \u1077  \u1091 \u1073 \u1088 \u1072 \u1090 \u1100 . \u1042  GeoJSON \u1084 \u1086 \u1078 \u1077 \u1090  \u1073 \u1099 \u1090 \u1100  (\u1080 \u1083 \u1080  \u1085 \u1077  \u1073 \u1099 \u1090 \u1100 ) \u1076 \u1077 \u1089 \u1103 \u1090 \u1082 \u1080  \u1085 \u1091 \u1078 \u1085 \u1099 \u1093  \u1087 \u1086 \u1083 \u1077 \u1081 , \u1087 \u1086 \u1101 \u1090 \u1086 \u1084 \u1091  \u1091 \u1076 \u1086 \u1073 \u1085 \u1086  \u1073 \u1099 \u1083 \u1086  \u1073 \u1099  \u1074 \u1099 \u1085 \u1077 \u1089 \u1090 \u1080  \u1087 \u1088 \u1086 \u1074 \u1077 \u1088 \u1082 \u1080  \u1085 \u1072  \u1082 \u1086 \u1088 \u1088 \u1077 \u1082 \u1090 \u1085 \u1086 \u1089 \u1090 \u1100  \u1074  \u1086 \u1090 \u1076 \u1077 \u1083 \u1100 \u1085 \u1091 \u1102  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1102 , \u1075 \u1076 \u1077  \u1087 \u1086 \u1083 \u1091 \u1095 \u1077 \u1085 \u1085 \u1099 \u1081  \u1086 \u1073 \u1098 \u1077 \u1082 \u1090  \u1084 \u1086 \u1078 \u1085 \u1086  \u1073 \u1099 \u1083 \u1086  \u1073 \u1099  \u1087 \u1088 \u1086 \u1074 \u1077 \u1088 \u1080 \u1090 \u1100  \u1085 \u1072  \u1089 \u1086 \u1086 \u1090 \u1074 \u1077 \u1090 \u1089 \u1090 \u1074 \u1080 \u1077  \u1074 \u1089 \u1077 \u1093  \u1087 \u1086 \u1083 \u1077 \u1081 . \u1058 \u1072 \u1082  \u1074  \u1082 \u1086 \u1076 \u1077  \u1087 \u1088 \u1086 \u1087 \u1072 \u1076 \u1072 \u1102 \u1090  \u1089 \u1080 \u1090 \u1091 \u1072 \u1094 \u1080 \u1080 , \u1082 \u1086 \u1075 \u1076 \u1072  \u1074  \u1086 \u1073 \u1098 \u1077 \u1082 \u1090 \u1077  \u1077 \u1089 \u1090 \u1100 , \u1085 \u1072 \u1087 \u1088 \u1080 \u1084 \u1077 \u1088 , \u1087 \u1086 \u1083 \u1077  featureCollection, \u1085 \u1086  \u1085 \u1077 \u1090  \u1087 \u1077 \u1088 \u1074 \u1086 \u1075 \u1086  \u1101 \u1083 \u1077 \u1084 \u1077 \u1085 \u1090 \u1072  \u1074  \u1085 \u1105 \u1084 . \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 private async Task<bool> BuildPath(MultiPolygon polygon, List<Tri> triangles)\
        \{        \
            FeatureCollection featureCollection = [];        \
            try\
            \{\
                Point firstPoint = GeneratePoint(polygon, triangles);\
                Point secondPoint = GeneratePoint(polygon, triangles);\
                GeoJsonReader reader = new();\
                featureCollection = reader.Read<FeatureCollection>(await (\
                            await GetPathBetweenAsync(firstPoint, secondPoint)\
                        ).Content.ReadAsStringAsync());\
            \}\
            catch\
            \{\
                throw new PointGenerationException();\
            \}\
           \
			 GeoJsonVeerifier.EnsurePathIsRight(featureCollection);\
            \
			 (featureCollection[0].Attributes.GetOptionalValue("summary") as IAttributesTable). GetOptionalValue("duration").ToString(), out var rideDuration))\
            \
			 foreach (var item in path.Coordinates)\
            \{\
                _coordinates.Enqueue(item);\
            \}\
\
            _ridePointsInterval = rideDuration / _coordinates.Count;\
\
            return true;\
\}          \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 =============================================================================\
\
function metaConfigure(oldIndex, newIndex) \{\
    playlist[currentSongIndex].pause()\
    \
    playlist[currentSongIndex].audio.currentTime = 0\
\
    if (replayButton.classList.contains('static-replay')) \{\
        playlist[oldIndex].audio.loop = false\
        playlist[newIndex].audio.loop = true\
    \}\
    currentSongIndex = newIndex\
    currentCover[0].src = trackListCovers[newIndex].src\
    currentArtist[0].textContent = trackListArtists[newIndex].textContent\
    currentSongName[0].textContent = trackListSongNames[newIndex].textContent\
\
    currentBackground[0].style.backgroundImage = 'url(' + trackListCovers[newIndex].src + ')'\
    videoElement.classList.add('hidden');\
    if (playlist[currentSongIndex].video !== undefined) \{\
        videoElement.classList.remove('hidden');\
        videoElement.src = playlist[currentSongIndex].video;\
        videoElement.pause();\
    \}\
\
    updateMediaSessionMetadata();\
\
    playlist[currentSongIndex].audio.volume = volumeBar.value\
\
    if (playlist[currentSongIndex].text !== undefined) \{\
        trackText.innerHTML =  getTextFromFile(playlist[currentSongIndex].text)\
    \} else \{\
        trackText.innerHTML = playlist[currentSongIndex].title + "<br>" + playlist[currentSongIndex].artist\
    \}\
\
    let isPlaying = false;\
\
    if (!paused) \{\
        if (playlist[currentSongIndex].video != undefined) \{\
            if (!isPlaying) \{\
                isPlaying = true;\
                videoElement.play()\
                .then(() => \{\
                    isPlaying = false;\
                \})\
                .catch(error => \{\
                    isPlaying = false;\
                    console.log(error);\
                \});\
            \}\
        \}\
    \}\
\}\
\
\
1. \uc0\u1062 \u1077 \u1087 \u1086 \u1095 \u1082 \u1091  if-\u1086 \u1074  \u1085 \u1072 \u1076 \u1086  \u1086 \u1073 \u1103 \u1079 \u1072 \u1090 \u1077 \u1083 \u1100 \u1085 \u1086  \u1091 \u1073 \u1088 \u1072 \u1090 \u1100 . (\u1042 \u1074 \u1077 \u1076 \u1077 \u1085 \u1080 \u1077  \u1087 \u1077 \u1088 \u1077 \u1084 \u1077 \u1085 \u1085 \u1086 \u1081  isPlaying \u1074 \u1086 \u1086 \u1073 \u1097 \u1077  \u1080 \u1079 \u1083 \u1080 \u1096 \u1085 \u1077 )\
2. \uc0\u1052 \u1086 \u1078 \u1085 \u1086  \u1080 \u1079 \u1073 \u1072 \u1074 \u1080 \u1090 \u1100 \u1089 \u1103  \u1086 \u1090  else \u1089  \u1087 \u1086 \u1084 \u1086 \u1097 \u1100 \u1102  \u1076 \u1077 \u1092 \u1086 \u1083 \u1090 \u1085 \u1086 \u1075 \u1086  \u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1103  \u1087 \u1077 \u1088 \u1077 \u1084 \u1077 \u1085 \u1085 \u1086 \u1081 . \
\
\
function metaConfigure(oldIndex, newIndex) \{\
    playlist[currentSongIndex].pause()\
    \
    playlist[currentSongIndex].audio.currentTime = 0\
\
    if (replayButton.classList.contains('static-replay')) \{\
        playlist[oldIndex].audio.loop = false\
        playlist[newIndex].audio.loop = true\
    \}\
    currentSongIndex = newIndex\
    currentCover[0].src = trackListCovers[newIndex].src\
    currentArtist[0].textContent = trackListArtists[newIndex].textContent\
    currentSongName[0].textContent = trackListSongNames[newIndex].textContent\
\
    currentBackground[0].style.backgroundImage = 'url(' + trackListCovers[newIndex].src + ')'\
    videoElement.classList.add('hidden');\
    if (playlist[currentSongIndex].video !== undefined) \{\
        videoElement.classList.remove('hidden');\
        videoElement.src = playlist[currentSongIndex].video;\
        videoElement.pause();\
    \}\
\
    updateMediaSessionMetadata();\
\
    playlist[currentSongIndex].audio.volume = volumeBar.value\
\
	let songText = playlist[currentSongIndex].title + "<br>" + playlist[currentSongIndex].artist;\
	if (playlist[currentSongIndex].text !== undefined) \{\
        songText =  getTextFromFile(playlist[currentSongIndex].text)\
    \}\
	trackText.innerHTML = songText;\
\
	if (!paused && playlist[currentSongIndex].video != undefined) \{\
		videoElement.play()\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2                 .then(() => \{\
                    isPlaying = false;\
                \})\
                .catch(error => \{\
                    isPlaying = false;\
                    console.log(error);\
                \});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 	\}\
\}}